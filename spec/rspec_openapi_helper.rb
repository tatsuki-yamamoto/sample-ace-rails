require 'rspec/openapi'

# Change the path to generate schema from `doc/openapi.yaml`
# RSpec::OpenAPI.path = 'doc/schema.yaml'

# Change the output type to JSON
# RSpec::OpenAPI.path = 'doc/schema.json'

# Or generate multiple partial schema files, given an RSpec example
# RSpec::OpenAPI.path = -> (example) {
#   case example.file_path
#   when %r[spec/requests/api/v1/] then 'doc/openapi/v1.yaml'
#   when %r[spec/requests/api/v2/] then 'doc/openapi/v2.yaml'
#   else 'doc/openapi.yaml'
#   end
# }

# Disable generating `example`
# RSpec::OpenAPI.enable_example = false

# Change `info.version`
# RSpec::OpenAPI.application_version = '1.0.0'

# Set the info header details
RSpec::OpenAPI.info = {
  description: 'API仕様'
}

# Set request `headers` - generate parameters with headers for a request
# RSpec::OpenAPI.request_headers = %w[X-Authorization-Token]

# Set response `headers` - generate parameters with headers for a response
# RSpec::OpenAPI.response_headers = %w[X-Cursor]

# Set `servers` - generate servers of a schema file
RSpec::OpenAPI.servers = [
  { url: 'http://localhost:8888' }
]

# Generate a comment on top of a schema file
RSpec::OpenAPI.comment = <<~EOS
  This file is auto-generated by rspec-openapi https://github.com/k0kubun/rspec-openapi

  When you write a spec in spec/requests, running the spec with `OPENAPI=1 rspec` will
  update this file automatically. You can also manually edit this file.
EOS

# Generate a custom description, given an RSpec example
# RSpec::OpenAPI.description_builder = -> (example) { example.description }

# Change the example type(s) that will generate schema
# RSpec::OpenAPI.example_types = %i[request]
